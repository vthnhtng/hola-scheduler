generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppUser {
  id       Int     @id @default(autoincrement())
  username String  @unique @db.VarChar(50)
  password String  @db.VarChar(255)
  fullName String? @db.VarChar(100)
  role     Role?
  email    String? @db.VarChar(100)

  @@map("app_users")
}

model Curriculum {
  id       Int                 @id @default(autoincrement())
  program  Program
  subjects CurriculumSubject[] @relation("curriculum_id_fk")

  @@map("curriculums")
}

model Subject {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @db.VarChar(100)
  category                Category
  prerequisiteId          Int?
  curriculumSubjects      CurriculumSubject[]      @relation("subject_id_fk")
  lecturerSpecializations LecturerSpecialization[] @relation("subject_id_fk")
  locationSubjects        LocationSubject[]        @relation("subject_id_fk")

  @@index([id], map: "subject_id_index")
  @@map("subjects")
}

model Lecturer {
  id                 Int                      @id @default(autoincrement())
  fullName           String                   @db.VarChar(100)
  faculty            Category
  maxSessionsPerWeek Int                      @map("max_sessions_per_week")
  specializations    LecturerSpecialization[] @relation("lecturer_id_fk")
  statistics         LecturerStatistic[]      @relation("lecturer_id_fk")
  teams              Team[]                   @relation("team_leader_id_fk")

  @@map("lecturers")
}

model Location {
  id       Int               @id @default(autoincrement())
  name     String            @db.VarChar(100)
  capacity Int
  subjects LocationSubject[] @relation("location_id_fk")

  @@map("locations")
}

model Course {
  id        Int                 @id @default(autoincrement())
  name      String              @unique(map: "name") @db.VarChar(50)
  school    String?             @db.VarChar(100) // Tên trường
  startDate DateTime            // Thời gian bắt đầu (bắt buộc)
  endDate   DateTime            // Thời gian kết thúc (bắt buộc)
  status    Status
  teams     Team[]              @relation("course_id_fk")
  scheduleFiles ScheduleFile[]
  lecturerStatistics LecturerStatistic[]

  @@map("courses")
}

model Team {
  id                  Int        @id @default(autoincrement())
  name                String     @db.VarChar(50)
  program             Program
  teamLeaderId        Int        @map("team_leader_id")
  courseId            Int        @map("course_id")
  teamLeaderReference Lecturer   @relation("team_leader_id_fk", fields: [teamLeaderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  courseReference     Course     @relation("course_id_fk", fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([teamLeaderId], map: "teams_team_leader_id_fkey")
  @@index([courseId], map: "teams_course_id_fkey")
  @@map("teams")
}

model CurriculumSubject {
  curriculumId        Int        @map("curriculum_id")
  subjectId           Int        @map("subject_id")
  curriculumReference Curriculum @relation("curriculum_id_fk", fields: [curriculumId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SubjectReference    Subject    @relation("subject_id_fk", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([curriculumId, subjectId])
  @@index([subjectId], map: "curriculum_subject_subject_id_fkey")
  @@map("curriculum_subject")
}

model LecturerSpecialization {
  lecturerId          Int      @map("lecturer_id")
  subjectId           Int      @map("subject_id")
  LecturerIdReference Lecturer @relation("lecturer_id_fk", fields: [lecturerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SubjectIdReference  Subject  @relation("subject_id_fk", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([lecturerId, subjectId])
  @@index([subjectId], map: "lecturer_specialization_subject_id_fkey")
  @@map("lecturer_specialization")
}

model LocationSubject {
  locationId          Int      @map("location_id")
  subjectId           Int      @map("subject_id")
  LocationIdReference Location @relation("location_id_fk", fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SubjectIdReference  Subject  @relation("subject_id_fk", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([locationId, subjectId])
  @@index([subjectId], map: "location_subject_subject_id_fkey")
  @@map("location_subject")
}

model ScheduleFile {
  id       Int    @id @default(autoincrement())
  filePath String @unique(map: "file_path") @db.VarChar(50)
  courseId Int   @map("course_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("schedule_files")
}

model Holiday {
  id   Int    @id @default(autoincrement())
  date String @unique(map: "date") @db.VarChar(50)

  @@map("holidays")
}

model LecturerStatistic {
  id                Int      @id @default(autoincrement())
  fromDate          String   @db.VarChar(50)
  toDate            String   @db.VarChar(50)
  numberOfSessions  Int
  lecturerId        Int      @map("lecturer_id")
  lecturerReference Lecturer @relation("lecturer_id_fk", fields: [lecturerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  courseId         Int      @map("course_id")
  course           Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([lecturerId], map: "lecturer_statistics_lecturer_id_fkey")
  @@map("lecturer_statistics")
}

model SessionUnavailable {
  sessionId            String   @id @db.VarChar(50)
  unavailableLecturers Json
  unavailableLocations Json
  @@map("session_unavailable")
}

enum Program {
  DH
  CD
}

enum Category {
  CT
  QS
}

enum Role {
  scheduler
  viewer
}

enum Status {
  Done
  Processing
  Undone
}
