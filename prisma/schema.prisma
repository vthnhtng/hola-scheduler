generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model AppUser {
    id       Int     @id @default(autoincrement())
    username String  @unique @db.VarChar(50)
    password String  @db.VarChar(255)
    fullName String? @db.VarChar(100)
    role     Role?
    email    String? @db.VarChar(100)

    @@map("app_users")
}

model Curriculum {
    id       Int                 @id @default(autoincrement())
    program  Program
    subjects CurriculumSubject[] @relation("curriculum_id_fk")

    @@map("curriculums")
}

model Subject {
    id                      Int                      @id @default(autoincrement())
    name                    String                   @db.VarChar(100)
    category                Category
    prerequisiteId          Int?
    curriculumSubjects      CurriculumSubject[]      @relation("subject_id_fk")
    lecturerSpecializations LecturerSpecialization[] @relation("subject_id_fk")
    locationSubjects        LocationSubject[]        @relation("subject_id_fk")

    @@index([id], map: "subject_id_index")
    @@map("subjects")
}

model Lecturer {
    id                 Int                      @id @default(autoincrement())
    fullName           String                   @db.VarChar(100)
    faculty            Category
    maxSessionsPerWeek Int                      @map("max_sessions_per_week")
    specializations    LecturerSpecialization[] @relation("lecturer_id_fk")

    @@map("lecturers")
}

model Location {
    id       Int               @id @default(autoincrement())
    name     String            @db.VarChar(100)
    capacity Int
    subjects LocationSubject[] @relation("location_id_fk")

    @@map("locations")
}

model Team {
    id      Int     @id @default(autoincrement())
    name    String  @db.VarChar(50)
    program Program

    @@map("teams")
}

model CurriculumSubject {
    curriculumId        Int        @map("curriculum_id")
    subjectId           Int        @map("subject_id")
    curriculumReference Curriculum @relation("curriculum_id_fk", fields: [curriculumId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    SubjectReference    Subject    @relation("subject_id_fk", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([curriculumId, subjectId])
    @@map("curriculum_subject")
}

model LecturerSpecialization {
    lecturerId          Int      @map("lecturer_id")
    subjectId           Int      @map("subject_id")
    LecturerIdReference Lecturer @relation("lecturer_id_fk", fields: [lecturerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    SubjectIdReference  Subject  @relation("subject_id_fk", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([lecturerId, subjectId])
	@@map("lecturer_specialization")
}

model LocationSubject {
    locationId          Int      @map("location_id")
    subjectId           Int      @map("subject_id")
    LocationIdReference Location @relation("location_id_fk", fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    SubjectIdReference  Subject  @relation("subject_id_fk", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([locationId, subjectId])
	@@map("location_subject")
}

model ScheduleFile {
    id       Int    @id @default(autoincrement())
    filePath String @unique(map: "file_path") @db.VarChar(50)

    @@map("schedule_files")
}

enum Program {
    DH
    CD
}

enum Category {
    CT
    QS
}

enum Role {
    scheduler
    viewer
}
